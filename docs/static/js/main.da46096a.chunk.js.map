{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OAEI,sBAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MASlB,SAEI,uBACCO,KAAK,OACLC,MAAOT,EACPU,SA1BiB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE2EC,UAAUH,GAFrF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAICA,EAAKC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAM,IAAD,EAExB,MAAM,CAEFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAkBZM,GAlBY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SASrB,ECVwB,SAACA,GAEzB,MAA0Bd,mBAAS,CACnCqB,KAAK,GACLa,SAAS,IAFT,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WAEPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAAI,OAAGH,EAAS,CACnCf,KAAKkB,EACLL,SAAQ,SAGb,CAACpB,IAEIqB,EDNwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGhB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAE9CoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEvB1BgB,EAAa,WAEtB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQC,OAEE,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAIS2C,EAAWnB,KAAK,SAAAT,GAAQ,OAErB,cAAC,EAAD,CAEKA,SAAUA,GADLA,U,MCtBjC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.da46096a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2 ){\r\n\r\n            setCategories(cats => [inputValue,...cats]); //cats es un callback que tiene el estado anterior.\r\n            setInputValue('');\r\n\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input\r\n             type=\"text\"\r\n             value={inputValue}\r\n             onChange= {handleInputChange}  //onChange se lanza (lanza un event) cada vez que el contenido del input cambie.\r\n             />\r\n\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes={  \r\n\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","\r\nexport const getGifs = async (category) =>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?api_key=hZ5gChjeaiUYJQq5MKarkcgfydqMDh7r&q=${ encodeURI(category)}}&limit=8`; //encodeURI = para saltear espacios en la url. \r\n    const resp = await fetch(url);\r\n    const {data} =await resp.json();\r\n\r\n    const gifs = data.map( img=>{\r\n\r\n        return{\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // ? = si vienen imagenes que las mueste.\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return gifs;\r\n\r\n    };","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card  animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) =>{\r\n\r\n    // const apiKey='hZ5gChjeaiUYJQq5MKarkcgfydqMDh7r';\r\n    //     const resp = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    \r\n\r\n    const {data:images, loading} = useFetchGifs(category); //'data:images' : para renombrar la variable.\r\n\r\n    \r\n        return(\r\n            <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n    \r\n                {loading && <p>Loading</p>}\r\n                \r\n                <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => (\r\n\r\n                            <GifGridItem \r\n                              key={img.id}\r\n                              {...img} /> //envia cada una de las propiedades de las imagenes como una propiedad independiente.\r\n                        ))  // () return implicito\r\n                         \r\n\r\n                    }\r\n              \r\n                </div>\r\n   \r\n\r\n            </>\r\n        );\r\n\r\n\r\n\r\n}","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n    data:[],\r\n    loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n       getGifs(category).then(imgs=> setState({\r\n           data:imgs,\r\n           loading:false\r\n       }));\r\n\r\n    },[category]); //para que getGifs se ejecute solo al renderizarlo por primera vez.\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp=()=>{\r\n\r\n    const [categories, setCategories] = useState(['Batman']);\r\n\r\n    // const handleAdd=()=>{\r\n\r\n    //     setCategories([...categories, 'NightCrawler']);\r\n\r\n    // }\r\n\r\n     return (\r\n     \r\n       <>\r\n           <h2>Gif Expert App</h2>\r\n\r\n           <AddCategory setCategories={setCategories} />\r\n\r\n           <hr/>\r\n           \r\n\r\n                 {\r\n                    categories.map( category => (\r\n                        \r\n                       <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                        //return <li key={category}>{category}</li> //el key es necesario para que React sepa espeficamente que componente cambio su estado al renderizar nuevamente.\r\n                 )) //parentesis para indicar que estamos retornando un objeto.\r\n\r\n                }\r\n\r\n         \r\n           \r\n        </>  )\r\n\r\n    \r\n}\r\n\r\n//export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}